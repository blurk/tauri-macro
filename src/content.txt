  beforeEach(() => {
    jest.resetModules();
    jest.doMock("react-native", () => ({ Platform: { OS: "ios" } }));
    jest.spyOn(helpers, "getOS").mockImplementation(() => "ios");
  });

  test("User navigates to LandingPage", ({ given, when, then }) => {
    let landingPageBlock: ShallowWrapper;
    let instance: LandingPage;

    given("I am a User loading LandingPage", () => {
      landingPageBlock = shallow(<LandingPage {...screenProps} />);
      render(<LandingPage {...screenProps} />, { wrapper: BrowserRouter });
    });

    when("I navigate to the LandingPage", () => {
      instance = landingPageBlock.instance() as LandingPage;

      simulateResponse(
        instance,
        "apiGetHeroImagesCallAPI",
        MOCK_HERO_IMAGE_RESPONSE
      );

      simulateResponse(
        instance,
        "apiGetGalleryImagesCallAPI",
        MOCK_GALLERY_IMAGE_RESPONSE
      );
    });

    then("LandingPage will load with out errors", () => {
      const value = Boolean(landingPageBlock);
      expect(value).toBe(true);
    });

    then("LandingPage with updated UI will load with out errors", () => {
      const value = Boolean(landingPageBlock);
      expect(value).toBe(true);
    });

    then(
      "Landing page to include the username once Signup or login is completed",
      () => {
        const header = landingPageBlock.find("TheHeader");
        expect(Boolean(header)).toBe(true);
      }
    );
  });
